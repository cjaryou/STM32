#include "stm32f4xx.h"

// LED ve Tuş Pinleri Tanımlamaları
#define LED_PORTU GPIOA
#define LED_PINI GPIO_Pin_5
#define TUSLER_PORTU GPIOB
#define TUS_L GPIO_Pin_0
#define TUS_M GPIO_Pin_1
#define TUS_P GPIO_Pin_2
#define TUS_K GPIO_Pin_3

// Global Değişkenler
volatile uint8_t aktif_mod = 0;

// Gecikme Fonksiyonu
void gecikme(volatile uint32_t sure) {
    while (sure--) {
        __NOP(); // İşlemciyi bekletmek için No Operation
    }
}

// GPIO Başlatma
void gpio_baslat() {
    // LED GPIO Portunu etkinleştir
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    GPIO_InitTypeDef LED_InitStruct;
    LED_InitStruct.GPIO_Pin = LED_PINI;
    LED_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
    LED_InitStruct.GPIO_OType = GPIO_OType_PP;
    LED_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
    LED_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(LED_PORTU, &LED_InitStruct);

    // Tuş GPIO Portunu etkinleştir
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    GPIO_InitTypeDef Button_InitStruct;
    Button_InitStruct.GPIO_Pin = TUS_L | TUS_M | TUS_P | TUS_K;
    Button_InitStruct.GPIO_Mode = GPIO_Mode_IN;
    Button_InitStruct.GPIO_PuPd = GPIO_PuPd_UP; // Pull-up dirençleri etkin
    GPIO_Init(TUSLER_PORTU, &Button_InitStruct);
}

// Kara Şimşek Efekti
void kara_simsek() {
    for (int i = 0; i < 4; i++) {
        GPIO_SetBits(LED_PORTU, LED_PINI);
        gecikme(500000);
        GPIO_ResetBits(LED_PORTU, LED_PINI);
        gecikme(500000);
    }
}

// LED Chaser Efekti
void led_takipcisi() {
    for (int i = 0; i < 6; i++) {
        GPIO_ToggleBits(LED_PORTU, LED_PINI);
        gecikme(500000);
    }
}

// Mod 255 Efekti
void mod_255() {
    for (int i = 0; i < 255; i++) {
        GPIO_WriteBit(LED_PORTU, LED_PINI, (i % 2) ? Bit_SET : Bit_RESET);
        gecikme(100000);
    }
}

// Polis Çakarı Efekti
void polis_cakari() {
    for (int i = 0; i < 6; i++) {
        GPIO_SetBits(LED_PORTU, LED_PINI);
        gecikme(300000);
        GPIO_ResetBits(LED_PORTU, LED_PINI);
        gecikme(300000);
    }
}

// Tuş Durumunu Oku
uint8_t tus_kontrol() {
    if (GPIO_ReadInputDataBit(TUSLER_PORTU, TUS_K) == Bit_RESET) return 1; // Kara Şimşek
    if (GPIO_ReadInputDataBit(TUSLER_PORTU, TUS_L) == Bit_RESET) return 2; // LED Chaser
    if (GPIO_ReadInputDataBit(TUSLER_PORTU, TUS_M) == Bit_RESET) return 3; // Mod 255
    if (GPIO_ReadInputDataBit(TUSLER_PORTU, TUS_P) == Bit_RESET) return 4; // Polis Çakarı
    return 0; // Hiçbir tuş basılı değil
}

// Ana Fonksiyon
int main(void) {
    SystemInit(); // Sistemi başlat
    gpio_baslat(); // GPIO'ları başlat

    while (1) {
        // Tuş kontrolü
        uint8_t yeni_mod = tus_kontrol();
        if (yeni_mod != 0) {
            aktif_mod = yeni_mod;
        }

        // Aktif moda göre işlem yap
        switch (aktif_mod) {
            case 1: kara_simsek(); break;
            case 2: led_takipcisi(); break;
            case 3: mod_255(); break;
            case 4: polis_cakari(); break;
            default: break;
        }

        // Mod değişimi sırasında bekleme
        gecikme(1000000);
    }
}
